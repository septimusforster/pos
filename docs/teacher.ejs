<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>TEACHER_GUI</title>
    <style>
        *{margin: 0;padding: 0;box-sizing: border-box;font-family: monospace;}
        .tabs{
            width: 50%;
            margin: 50px auto;
            display: flex;
            flex-wrap: wrap;
        }
        .tabs__label{
            padding: 20px 16px;
            cursor: pointer;
            position: sticky;
            top: 0;
        }
        .tabs__radio{
            display: none;
        }
        .tabs__content{
            order: 1;
            width: 100%;
            border-top: 1px solid #dddddd;
            line-height: 1.5;
            font-size: 1.1em;
            display: none;
            padding: 20px;
            height: 70vh;
            overflow-y: auto;
        }
        .tabs__radio:checked + .tabs__label{
            font-weight: bold;
            color: #2266dc;
            border-bottom: 3px solid #2266dc;
        }
        .tabs__radio:checked + .tabs__label + .tabs__content{
            display: initial;
        }
        form{
            display: flex;
            justify-content: center;
            align-items: center;
            flex-direction: column;
            gap: 30px;
            margin: 20px auto;
        }
        select{
            width: 350px;
            padding: 10px;
            font-size: 1em;
            cursor: pointer;
        }
        button{
            border: none;
            outline: none;
            font-family: "Readex Pro", sans-serif;
            font-size: 12px;
            padding: 1em 2em;
            border-radius: 1.5em;
            cursor: pointer;
        }
        .chkboxLabel{
            display: inline-flex;
            align-items: center;
            cursor: pointer;
        }
        .chkboxInput{
            display: none;
        }
        .chkbox__box{
            width: 1.25em;
            height: 1.25em;
            border: 2px solid #dddddd;
            border-radius: 3px;
            margin: 16px 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            flex-shrink: 0;
            transition: background 0.15s, border-color 0.15s;
        }
        .chkbox__box::after{
            content: '\2714';
            color: #ffffff;
        }
        .chkboxInput:checked + .chkbox__box{
            background: #2266dc;
            border-color: #2266dc;
        }
        #chkbox__selection{
            background-color: #ffffff;
            position: absolute;
            top: 0;
            box-shadow: 0 2px 8px 3px rgba(0,0,0,0.15);
            width: 100%;
            display: none;
            justify-content: center;
            align-items: center;
            height: 76px;
            gap: 2em;
        }
        #chkbox__selection span{
            margin-right: 30px;
        }
        #chkbox__selection button:hover{
            /*background-color: #2266dc;*/
            background-color: #2266dc;
            color: #ffffff;
        }
        dialog.modal{
            margin: auto;
            border: 0;
            border-radius: 8px;
            padding: 15px;
            /* display: flex; */
            flex-direction: column;
            align-items: center;
            gap: 2em;
            width: 20%;
        }
    </style>
    
</head>
<body>
    <header style="display: flex;align-items: center;padding: 20px;position: sticky;">
        <svg viewBox="0 0 24 24" preserveAspectRatio="xMidYMid meet" focusable="false" style="pointer-events: none; width: 3%; height: 3%;fill: #445793;">
            <g>
                <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z">Abakaliki</path>
            </g>
        </svg>
        <span style="margin-left: 10px;"><%= teacher.fname %></span>
    </header>
    <div class="tabs">
            <input type="radio" class="tabs__radio" name="tab-header" id="upload-tab" checked>
            <label for="upload-tab" class="tabs__label">Upload</label>
        <div class="tabs__content">
            <p style="color:#555;margin-bottom:20px;">NB: This web service is still undergoing improvements, and has currently available only two types of activity.</p>
            
            <form action="/upload" method="post" enctype="multipart/form-data">
                <select onchange="" name="activity" id="activity" required>
                    <option value="">--Choose Activity--</option>
                    <option value="Exercise">Exercise</option>
                    <option value="Note">Note</option>
                    <!--option value="Quiz">Quiz</option-->
                </select>
                <select name="my_class" id="classroom" required>
                    <option value="">--Choose classroom--</option>
                </select>
                <select name="my_subjects" id="subject" required disabled>
                    <option value="">--Choose subject</option>
                </select>
                <input type="file" name="file" id="file" required disabled>
                <input type="hidden" name="author" value="<%= teacher._id %>">
                <button type="submit" onclick="window.localStorage.setItem('resetDirectory', true)">Upload Activity</button>
            </form>
            
            <!--div class="msg"></div-->

        </div>
        <input type="radio" class="tabs__radio" name="tab-header" id="directory-tab" value="<%= teacher._id %>">
        <label for="directory-tab" class="tabs__label">Directory</label>
        <div class="tabs__content">
            <p style="color:#555;margin-bottom:20px;">This contains the files that you have uploaded.</p>
            <div id="directory" style="padding: 16px;display: flex;flex-direction:column;">

            </div>
        </div>
        <input type="radio" class="tabs__radio" name="tab-header" id="extras-tab">
        <label for="extras-tab" class="tabs__label">Extras</label>
        <div class="tabs__content">
            EXTRAS Content is still in maintenance.
            <!--this may hold live chat program-->
            <div id="bc-elem"></div>
        </div>
    </div>
    <div id="chkbox__selection">
        <span>items selected</span>
        <button type="button" id="delete-btn">Delete</button>
        <button type="button" onclick="cancelDeletion(this.parentElement)">Cancel</button>
    </div>
    <dialog class="modal">
        <button type="button" id="fine">OKAY</button>      
    </dialog>

    <!--<iframe src="Surveillance.pdf#toolbar=0" frameborder="0"></iframe>-->
    <script>
        //set global counter
        let boxCount = 0;
        var chkboxArray = [];

        //for the delete button
        //document.addEventListener('DOMContentLoaded', () => {
        const modal = document.querySelector('.modal');
        const fine = document.getElementById('fine');
        const deleteButton = document.getElementById('delete-btn');

            deleteButton.onclick = () => {
                deleteButton.disabled = true;
                deleteButton.style.cursor = "not-allowed";

                document.querySelectorAll('.chkboxInput').forEach(checkbox => {
                    if(checkbox.checked){
                        chkboxArray.unshift(checkbox.value);
                    }
                })
                
                //fetch url to delete the files
                fetch("/api/del/files", {
                    method: "POST",
                    body: JSON.stringify({chkboxArray}),
                    headers: {
                        "Content-type": "application/json; charset=UTF-8"
                    }
                })
                .then(response => response.json())
                .then(data => {
                    //reset chkbox__selection innerHTML
                    const newParagraph = document.createElement('p');
                    const paraContent = document.createTextNode(data.msg);

                    newParagraph.appendChild(paraContent);
                    modal.insertBefore(newParagraph, modal.children[0]);
                    modal.style.display = 'flex';
                    //display modal
                    modal.showModal();
                })
            }
            //resetting the modal
            modal.addEventListener('keyup', async (e) => {
                if(e.keyCode == 27 || e.keyCode == 13){
                    await resetFiles();
                    modal.style.display = 'none';
                }
            })
            fine.addEventListener('click', async () => {
                await resetFiles();
                modal.style.display = 'none';
            })
            function resetFiles(){
                document.getElementById('chkbox__selection').style.display = 'none';
                deleteButton.disabled = false;
                deleteButton.style.cursor = "pointer";
                document.querySelectorAll('.chkboxInput').forEach((checkbox, ind) => {
                    if(checkbox.checked){
                        document.querySelector('#directory').removeChild(document.querySelectorAll('.chkboxLabel')[ind]);
                    }
                })
                modal.children[0].remove(); //remove paragraph element
                modal.close();
                boxCount = 0;
            }
        
    //<script><script>
        
        //cancel deletion
        function cancelDeletion(val) {
            boxCount = 0;
            //clear checkboxes
            document.getElementsByName('chkboxInput').forEach((checkbox) => {
                if(checkbox.checked){
                    checkbox.checked = false;
                }
            })
            val.style.display = "none";
        }
        //reset directoryLoaded to false 
        window.localStorage.setItem("resetDirectory", true)

        document.getElementById('directory-tab').addEventListener('click', function fetchDir(){
            if(window.localStorage.getItem("resetDirectory") === 'true'){
                fetch('/teacher/directory/' + document.querySelector('input[type="hidden"]').value, {
                    method: 'get'
                })
                .then((response) => {
                    response.json()
                    .then((data) => {
                        //create checkboxes
                        for(i = 0; i < data.result.length; i++){
                            document.getElementById('directory').innerHTML += `
                                <label for="dir${i}" class="chkboxLabel">
                                    <input type="checkbox" class="chkboxInput" id="dir${i}" name="chkboxInput" value="${data.result[i]._id}">
                                    <div class="chkbox__box"></div>
                                    ${data.result[i].originalName}
                                </label>
                            `;
                        }
                        //checkbox selection count
                        var checkboxes = document.querySelectorAll('.chkboxInput');
                        const spanInput = document.querySelector('#chkbox__selection span');
                        const chkbox = document.querySelector('#chkbox__selection');

                        checkboxes.forEach((checkbox) => {
                            checkbox.addEventListener('change', () => {
                                if(checkbox.checked){
                                    boxCount++;
                                    chkbox.style.display = 'flex';
                                } else {
                                    boxCount--;
                                    if (boxCount == 0) {
                                        chkbox.style.display = 'none';
                                    }
                                }
                                spanInput.textContent = `${boxCount + ' files'.slice(0,boxCount*5)} selected.`;
                            })
                        })
                    })
                })
                .catch(err => {
                    document.getElementById('directory').innerHTML = "<span style='font-family:monospace'>An error occured while loading the page. Please check your internet connection and try again.</span><button onclick='fetchDir()'>Reload</button>";
                })
                window.localStorage.setItem("resetDirectory", false)
            }
        })
    </script>

    <script>
        let classroomSubject;

fetch('/teacher/index/' + document.querySelector('input[type="hidden"]').value)
    .then(function(response){
        //console.log(response.json())
        response.json()
        .then(data => {
            classroomSubject = data.roles;

            const selectClassroom = document.getElementById('classroom'),
                selectSubject = document.getElementById('subject'),
                selectFile = document.getElementById('file'),
                selects = document.querySelectorAll('select');

                selects.forEach(select => {
                    if(select.disabled == true){
                        select.style.cursor = "auto";
                    }
                })

                for(let classroom in classroomSubject){
                    //console.log(classroom);
                    selectClassroom.options[selectClassroom.options.length] = new Option(classroom, classroom);
                }

                selectClassroom.onchange = (e) => {
                    selectSubject.disabled = false;
                    selectFile.disabled = true;

                    selectSubject.length = 1;

                    for(let subject in classroomSubject[e.target.value]){
                        let x = classroomSubject[e.target.value][subject];
                        selectSubject.options[selectSubject.options.length] = new Option(x, x);
                    }
                }

                selectSubject.onchange = (e) => {
                    selectFile.disabled = false;
                }
            
        }) 
    })
    </script>
    
</body>
</html>